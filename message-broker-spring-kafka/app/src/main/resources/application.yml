# ======================================
# TOPOLOGY and EXTERNAL DEPENDENCIES
# ======================================
application:
  name: message-broker-spring-kafka
  persistence:
    host: localhost
    port: 5432
    database: postgres
    username: postgres
    password: postgres
    #    url: postgresql://${application.persistence.host}:${application.persistence.port}/${application.persistence.database}
    url: h2:mem:///test?options=DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

  channel:
    # Where email request is consumed
    email-source:
      topic: "input-email"
      max-poll:
        records: 100
        interval-ms: 300000 # 5 min
      retry:
        maxAttempts: 3
        timeout: 10000

# ======================================
# Spring Boot
# ======================================
spring:
  application:
    name: ${application.name}

  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      auto-offset-reset: earliest

  # Bootstrap DB
  flyway:
    url: jdbc:${application.persistence.url}
    user: ${application.persistence.username}
    password: ${application.persistence.password}
    locations: "classpath:/db/migration"
    enabled: true

  # R2DBC
  r2dbc:
    url: r2dbc:${application.persistence.url}
    username: ${application.persistence.username}
    password: ${application.persistence.password}
    initialization-mode: always

logging:
  level:
    org.springframework.data.r2dbc: DEBUG
    org.springframework.transaction: TRACE

# ======================================
# Management
# ======================================
server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - metrics
#          - prometheus
  endpoint:
    metrics.enabled: true
    health.show-details: ALWAYS
info:
  app:
    name: ${application.name}
    port: ${server.port}
